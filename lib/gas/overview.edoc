@title Welcome to the GAS (General Application Services) application
@doc 

<img src="http://www.martinjlogan.com/images/erlware-header.gif"/>

<p>
GAS provides general application services and configuration tools to a release.
</p>

<p>
The <em>GAS</em> application stands for General Application Services.
This comes down two two things:</p>
<p>
 1. Provide a framework for dealing with system wide configuration.
    gas provides a number of functions for
   <ul>
     <li>pulling config at run time</li>
     <li>updating config at run time</li>
     <li>working with and managing config files</li>
     <li>overriding configuration from the commandline</li>
     <li>Easily set default config values in your code</li>
   </ul>
 2. The second function of GAS is to provide a dynamic supervision structure for
    so that applications can share resources and avoid the complications  
    associated with duplicate service process inclusion. For example consider
    what happens when two applications in a release both use a single registered 
    library process like fs_elwrap.erl. GAS makes sure it is inluded only once for
    a given release.
</p>

<h2>Commandline Overriding</h2>

<p>Commandline overriding is accomplished by adding plain arguments to a call to
erl.  Plain arguments are those that are unevaluated by the run time system and
are specified by supplying the -extra flag as the last thing on the commandline.
after the -extra flag you simply add the -override flag and follow that with
overrides of the form -&lt;appname&gt; &lt;key&gt; &lt;value&gt;. For example if you wanted to override
the erts-code entry for the faxien application in the config file that looked like:
</p>
```
{faxien, [
          {history, true},
          {erts-codes, [{on, "5.5.5"}}
         [
}
'''
you could use <pre>-extra -override -faxien erts-code {off, \"5.6.3\"}</pre>.
in order to override more than one value simply add more -&lt;appname&gt; &lt;key&gt; &lt;value&gt;
entries. Note that quotes both single and double should be escaped on the shell as in \" or \' 
to ensure the shell does not evaluate them and that they are passed through to the VM.

<h2>Filebased Config Overriding</h2>
<p>
Config file overrides are accomplished through the following entry into the config file:
</p>

```
{override_file_path, <some-file-path>
'''

<p>
The override_file_path should be a path, not just a filename. If only a file name is supplied the file is assumed to be off the users home directory. To specifically configure an override file to be relative to a users home directory can be accomplished using the config entry below.
</p>

```
{home_file_path, <some-file-path>
'''

<h2>Dynamic Supervision</h2>

<p>
Log file rotation and truncation is a good example of where GAS is needed. A problem can arise from this if more than one application in a release includes a general service such as this that could happen to use a registered name, or in the case of file rotation, happens to modify a single resource in a non idempotent manner. GAS allows the owner of a release to configure these services to run on a per release basis instead of a per application basis. For example to configure file rotation and trunction with ewl_elwrap_h, which is found in the ewlib application, the release config entries would be the following
</p>

```
 {sasl,   [{sasl_error_logger, {file, "/tmp/sasl_log"}}]},
 
 {gas,
  [
   %% indicates the module function and optionally args of the services to startup.
   %% at startup ewl_elwrap_h:start_link() will be called as a result of this entry.
   {mod_specs, [{elwrap, {ewl_elwrap_h, start_link}}]},
   
   %% ewl_elwrap_h specific config. These are specified by the GAS 
   %% configuration_spec/1 callback function within the ewl_elwrap_h module
   %% Optionally if needed all this config could be supplied directly
   %% as arts to the mod_spec above.
   {err_log, "/tmp/err_log"},
   {err_log_wrap_info, {{err,5000000,10},{sasl,5000000,10}}},
   {err_log_tty, false}
  ]
 },
'''

<p>
GAS also has one other important function.  It provides extended support for managing erlang configuration and configuration files. 
</p>


@author Martin Logan
@copyright 2007, 2008 Erlware
