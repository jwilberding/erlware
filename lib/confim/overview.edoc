@title confim (General Application Services)
@doc 
<img src="http://www.erlware.org/images/erlware-header.gif"/>

<h2>What confim Does</h2>
<p>
Confim is a much more powerful way to configure your OTP Release. It 
relies on the same ETS based infrastructure and *.config files as the
standard OTP configuration provided by the application module. Confim
is far more powerful however.
</p>
<p>
    The application module that comes with standard Erlang does this
    as well but provides only a minimal subset of what confim provides.
    confim builds ontop of application and provides functions for
   <ul>
     <li>Setting and overriding configuration from the commandline</li>
     <li>Configuration file inheritance and overriding</li>
     <li>Pulling config at run time</li>
     <li>Updating config at run time</li>
     <li>Working with and managing config files</li>
     <li>Easily set default config values in your code</li>
   </ul>
</p>

<h2>Why the name confim?</h2>
<p>
The <em>confim</em> application stands for 
Configuration Improved -&gt; Conf Improved -&gt; Confim
</p>

<h2>Commandline Config Overriding</h2>

<p>Commandline overriding is accomplished by adding plain arguments to a call to
erl.  Plain arguments are those that are unevaluated by the run time system and
are specified by supplying the -extra flag as the last thing on the commandline.
Following the -extra flag you add the -override flag to signal overrides and follow 
that with overrides of the form -&lt;appname&gt; &lt;key&gt; &lt;value&gt;. 
For example take the config file below for the Faxien application. 
</p>
```
{faxien, [
          {history, true},
          {logging, tty}
         [
}
'''
<p>
lets say you wanted to override the logging entry. You could use 
<pre>-extra -override -faxien logging {file, \"/tmp/fax.log\"} -faxien history false</pre>.
in order to override more values simply add more -&lt;appname&gt; &lt;key&gt; &lt;value&gt;
entries. Note that quotes both single and double should be escaped on the shell i.e \" or \' 
to ensure the shell does not evaluate them and that they are passed through to the VM.
</p>

<h2>Filebased Config Overriding (Config Inheritance)</h2>
<p>
Config file overrides are accomplished through the following entry into the config file:
</p>

```
{override_file_path, <some-file-path>}
'''

<p>
The override_file_path should be a path, not just a filename. If only a file name is supplied the file is assumed to be off the users home directory. To specifically configure an override file to be relative to a users home directory can be accomplished using the conveience format config entry below.
</p>

```
{home_file_path, <some-file-path>}
'''

such as

```
{home_file_path, ".faxien_override.config"}
'''

the above would cause Faxien to look in $HOME for a file called .faxien_override.config to override the config for the release.

<h2>Configuration Functions</h2>
<p>
Confim provides programatic support for applications to manage pulling and setting their config data.
</p>
   <ul>
     <li>Pulling config at run time</li>
     <li>Updating config at run time</li>
   </ul>
<p>
Pulling config at runtime is done with the get_env function. This function comes in a couple of flavors. 

```
confim:get_env(<appname>, <key>) 
'''

This function fetches the configuration for a particular appname grouping that is identified by <key>. For example in the faxien config file used in the previous section if we wrote

```
confim:get_env(faxien, history)
'''

the return value would be {ok, true}. If we go to fetch a key that does not exist from config this function will return undefined.  This is exactly the same behaviour as application:get_env/2. Confim get_env/3 allows default configuration values to clearnly be set in code. 

```
confim:get_env(<appname>, <key>, <default-value>)
confim:get_env(faxien, history, false)
'''

Now if faxien history is not explictly set in configuration get_env will return {ok, false} which is the default value set as the third argument. Let's now move on to setting configuration.  

```
confim:set_env(<appname>, <key>, <value>)
'''

set_env will alter or add configuration depending on whether that configuration was present prior to the call to set_env. This will only alter the configuration for the life of the system. When the VM stopps and is restarted the original configuration values as found through the config file(s) will be used once again. If you desire configurations changes to be persisted to disk, i.e actually rewrite the config file(s) then following a call to set_env use persist_env.

```
confim:persist_env(<config_file_list>)
'''

The persist env command will push all configuration out to disk. If override configuration files the last override file in the chain will receive all of the changes.
</p>

@author Martin Logan
@copyright 2003 - 2009 Erlware
